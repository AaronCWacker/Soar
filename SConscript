import sys

Import('env', 'compiler', 'lsb_build')

# svs viewer
viewer_env = env.Clone()
viewer_env['LIBS'] = []
viewer_env['CPPPATH'] = [ 'viewer', 'glfw/lib' ]
viewer_env.Append(CPPPATH = 'glfw/include')
viewer_src = Glob('viewer/*.c') + Glob('glfw/lib/*.c')

if compiler == 'msvc':
	opengl_libs = [ 'opengl32', 'glu32' ]
	viewer_env.Append(
		CPPPATH   = [ 'glfw/lib/win32' ],
		LIBS      = [ 'Ws2_32', 'Mswsock', 'AdvApi32', 'user32' ] + opengl_libs,
		LINKFLAGS = [ '/SUBSYSTEM:CONSOLE' ]
	)
	viewer_src.append('viewer/platform_specific/windows.c')
	viewer_src.extend(Glob('glfw/lib/win32/*.c'))
else:
	viewer_src.append('viewer/platform_specific/posix.c')
	if sys.platform == 'darwin':
		opengl_libs = []
		frameworks = [ 'Cocoa', 'OpenGL', 'IOKit' ]  # osx uses opengl as a framework instead of libraries
		viewer_env.Append(
			CPPFLAGS  = [ '-fno-common' ],
			CPPPATH   = [ 'glfw/lib/cocoa/' ],
		)
		for f in frameworks:
			viewer_env.Append(LINKFLAGS = [ '-framework', f ])
		
		viewer_src.extend(Glob('glfw/lib/cocoa/*.c') + Glob('glfw/lib/cocoa/*.m'))
	else:
		opengl_libs = [ 'GL', 'GLU' ]
		viewer_env.Append(
			CPPFLAGS  = [ '-D_GLFW_HAS_PTHREAD', '-D_GLFW_HAS_SYSCONF', '-D_GLFW_HAS_SCHED_YIELD', '-pthread' ],
			CPPPATH   = [ 'glfw/lib/x11' ],
			LIBS      = [ 'm', 'pthread', 'rt', 'X11' ] + opengl_libs,
		)
		viewer_src.extend(Glob('glfw/lib/x11/*.c'))

config = Configure(viewer_env)
missing_libs = [ l for l in opengl_libs if not config.CheckLib(l)]
viewer_env = config.Finish()
if not missing_libs:
	viewer_prog = viewer_env.Program('svs_viewer', viewer_src)
	viewer_install = viewer_env.Alias('svs_viewer', viewer_env.Install('$OUT_DIR', viewer_prog))
else:
	print 'Cannot find %s, not building svs_viewer' % ', '.join(missing_libs)

# svs_test
test_prog = env.Program('test_svs', 'src/progs/test_svs.cpp')
test_install = env.Alias('test_svs', env.Install('$OUT_DIR', test_prog))

# svs library objects
svs_env = env.Clone()
svs_env['LIBS'] = []

srcdirs = ['src', 'src/filters', 'src/commands', 'src/models', 'src/algorithms']
incdirs = [env.Dir(d).srcnode() for d in 'src src/algorithms src/models eigen ccd'.split()]

if compiler == 'g++':
	flags = [
		# By default Eigen will try to align all fixed size vectors to 128-bit
		# boundaries to enable SIMD instructions on hardware such as SSE. However,
		# this requires that you modify every class that has such vectors as members
		# so that they are correctly allocated. This seems like more trouble than
		# it's worth at the moment, so I'm disabling it.
		'-DEIGEN_DONT_ALIGN',
		'-Wno-enum-compare',
	]
	if sys.platform == "darwin":
		srcdirs.append('src/osx')
		incdirs.append('src/osx')
	else:
		srcdirs.append('src/posix')
		incdirs.append('src/posix')
		if lsb_build:
			flags.append('-DEIGEN_ALLOCA=aligned_malloc')

elif compiler == 'msvc':
	flags = [
		'/D', 'EIGEN_DONT_ALIGN',
		'/wd4307',
		'/wd4308',   # disables two warnings generated by Eigen code
	]
	srcdirs.append('src/windows')
	incdirs.append('src/windows')

src = []
for d in srcdirs:
	src += Glob(d + '/*.cpp')

svs_env.Prepend(
	CPPPATH = incdirs,
	CPPFLAGS = flags
)

ccd_env = env.Clone()
ccd_env['LIBS'] = []
ccd_env['CPPPATH'] = [env.Dir('ccd').srcnode()]
ccd_src = Glob('ccd/*.c')

if compiler == 'msvc':
	ccd_env.Append(CPPFLAGS=['/D', 'WIN32'])
	
if GetOption('static'):
	svs_objs = svs_env.Object(src) + ccd_env.Object(ccd_src)
else:
	svs_objs = svs_env.SharedObject(src) + ccd_env.SharedObject(ccd_src)

svs_inc = ['SVS/src']
Return('svs_objs', 'svs_inc')
