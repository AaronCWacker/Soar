import os

jp = os.path.join

HOME = os.environ['HOME']
BUILD = jp(HOME, 'build/svs2')
OUT = jp(HOME, 'svsout')
SRC = jp('..', 'src')
ALG = jp(SRC, 'algorithms')
MDL = jp(SRC, 'models')

env = Environment(
	CPPPATH = os.environ.get('CPATH','').split(':') + [SRC, ALG, MDL, '../eigen' ],
	#CPPFLAGS = ['-O3', '-Wno-enum-compare'],
	CPPFLAGS = ['-g', '-Wno-enum-compare'],
	LINKFLAGS = ['-g'],
	LIBPATH = os.environ.get('LD_LIBRARY_PATH', '').split(':'),
	LIBS = [ 'rt', 'opencv_core', 'opencv_ml' ],
)

def obj(names):
	global env
	
	o = []
	for n in names:
		a = n + '.cpp'
		b = n + '.o'
		if os.path.exists(a):
			o.append(env.StaticObject(source = a, target = jp(BUILD, b)))
		elif os.path.exists(jp(SRC, a)):
			o.append(env.StaticObject(source = jp(SRC, a), target = jp(BUILD, b)))
		elif os.path.exists(jp(ALG, a)):
			o.append(env.StaticObject(source = jp(ALG, a), target = jp(BUILD, 'alg', b)))
		elif os.path.exists(jp(MDL, a)):
			o.append(env.StaticObject(source = jp(MDL, a), target = jp(BUILD, 'alg', b)))
	
	return o

def exe(name, objs):
	p = env.Program(jp(OUT, name), obj(objs))
	env.Default(p)

common = ['common', 'mat', 'serialize', 'timer', 'cliproxy']

run_lda = common + ['lda', 'run_lda']

test_foil = common + ['relation', 'foil', 'test_foil']

test_intervalset = common + ['relation', 'test_intervalset']

test_csp = common + ['relation', 'foil', 'test_csp']

test_em = common + [
	'relation',
	'scene_sig',
	'drawer',
	'ipcsocket',
	'sgnode',
	'model',
	
	'nn',
	'lwr',
	'linear',
	'foil',
	'lda',
	'em',
	'classifier',
	'mode',
	
	'test_em',
]

exe('run_lda', run_lda)
exe('test_foil', test_foil)
exe('test_intervalset', test_intervalset)
exe('test_csp', test_csp)
exe('test_em', test_em)
