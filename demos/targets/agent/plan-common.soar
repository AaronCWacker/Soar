source targets.soar

epmem --set learning on
epmem --set path plan.sqlite3

sp {init*curr-state
   (state <s> ^task-state t)
-->
   (<s> ^curr-state <cs>)
   (<cs> ^positive <p> ^negative <n>)}

# link a result atom from an extract command to the state
sp {elab*atom
   (state <s> ^curr-state.<sign> <cp>
              ^svs.command.extract <e>)
   (<e> ^type <pred> ^result.<sign>.atom <a>)
-->
   (<cp> ^<pred> <a>)}

# Any predicate that the EM modeler deems important should be extracted
#
#sp {extract-em-predicates-2
#   (state <s> ^svs.command <cmd>)
#   (<cmd> ^create-model <cm>)
#   (<cm> ^type em ^status success ^result.tests.<pred> <p>)
#   (<p> ^<param1> <id1>
#        ^{<param2> > <param1>} <id2>
#       -^{<param3> > <param2>})
# -{(<cmd> ^create-model <cm2>)
#   (<cm2> ^type em ^status success ^result.tests.<pred> {<p2> < <p>})
#   (<p2> ^<param1> <id1> ^<param2> <id2>)}
#-->
#   (<cmd> ^extract <e>)
#   (<e> ^type <pred>
#        ^<param1> <n1>
#        ^<param2> <n2>)
#   (<n1> ^type node ^name <id1>)
#   (<n2> ^type node ^name <id2>)}

sp {extract-goal
   (state <s> ^superstate nil
              ^svs.command <cmd>
              ^goal-state.<sign>.<pred> <p>)
   (<p> ^<param1> <v1>
        ^{<param2> > <param1>} <v2>
       -^{<param3> > <param2>})
-->
   (<cmd> ^extract <e>)
   (<e> ^type <pred>
        ^<param1> <n1>
        ^<param2> <n2>)
   (<n1> ^type node ^name <v1>)
   (<n2> ^type node ^name <v2>)}

sp {goal
   (state <s> ^superstate nil)
-->
   (<s> ^goal-state <gs>)
   (<gs> ^positive <p> ^negative <n>)
   (<p> ^horizontally-aligned <h>
        ^vertically-aligned <v>)
   (<h> ^a c1 ^b t1)
   (<v> ^a c1 ^b t1)}
