sp {define-output
   (state <s> ^superstate nil
              ^svs.command <c>)
-->
   (<c> ^output <out>)
   (<out> ^dx <l> ^dy <r>)
   (<l> ^min -1.0 ^max 1.0 ^default 0.0 ^increment 1)
   (<r> ^min -1.0 ^max 1.0 ^default 0.0 ^increment 1)}

sp {apply*change-predicate*intersect
   (state <s> ^operator <o>
              ^svs.command <cmd>)
   (<o> ^name change-predicate
        ^predicate intersect
        ^params <p>
        ^sign <sign>)
   (<p> ^a <a> ^b <b>)
-->
   (<cmd> ^seek <sk>)
   (<sk> ^type tree
         ^depth 1
         ^objective <obj>
         ^to-change <c>)
   (<c> ^predicate intersect
        ^params <p>
        ^sign <sign>)
   (<obj> ^name euclidean
          ^sign <sign>
          ^a <a>
          ^b <b>)}

sp {propose*wait-for-seek
   (state <s> ^svs.command.seek.status success
              ^time <t>)
-->
   (<s> ^operator <o> +)
   (<o> ^name wait)}

sp {apply*wait-for-seek
   (state <s> ^time <t>
              ^operator.name count-time)
-->
   (<s> ^time <t> - (+ <t> 1))}
