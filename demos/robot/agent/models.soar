sp {create-em-model-x
   (state <s> ^superstate nil
              ^svs.command <c>)
-->
   (<c> ^create-model <cm>)
   (<cm> ^name emx ^type em)}

sp {assign-em-model-x
   (state <s> ^superstate nil
              ^svs.command <c>)
   (<c> ^create-model <cm>)
   (<cm> ^name emx ^status success)
-->
   (<c> ^assign-model <am>)
   (<am> ^name emx
         ^inputs all
         ^outputs .box1:px <out>)}
   
sp {create-em-model-y
   (state <s> ^superstate nil
              ^svs.command <c>)
-->
   (<c> ^create-model <cm>)
   (<cm> ^name emy ^type em)}

sp {assign-em-model-y
   (state <s> ^superstate nil
              ^svs.command <c>)
   (<c> ^create-model <cm>)
   (<cm> ^name emy ^status success)
-->
   (<c> ^assign-model <am>)
   (<am> ^name emy 
         ^inputs all
         ^outputs .box1:py <out>)}

#sp {create-manual-model
#   (state <s> ^superstate nil
#              ^svs.command <c>)
#-->
#   (<c> ^create-model <cm>)
#   (<cm> ^name manual
#         ^type splinterenv
#         ^test t)}
#
#sp {assign-manual-model
#   (state <s> ^superstate nil
#              ^svs.command <c>)
#   (<c> ^create-model <cm>)
#   (<cm> ^name manual ^status success)
#-->
#   (<c> ^assign-model <am>)
#   (<am> ^name manual
#
#         ^inputs .box1:px       .box1:py
#                 .box1:vx       .box1:vy
#                 .box1:fx       .box1:fy
#                 .box1:rz       .box1:av     .box1:t
#                 .splinter:px   .splinter:py
#                 .splinter:vx   .splinter:vy
#                 .splinter:fx   .splinter:fy
#                 .splinter:rz   .splinter:av .splinter:t
#                 .splinter:lrps .splinter:rrps
#                 .left          .right
#                 <in>
#   
#         ^outputs .box1:px       .box1:py
#                  .box1:vx       .box1:vy
#                  .box1:fx       .box1:fy
#                  .box1:rz       .box1:av     .box1:t
#                  .splinter:px   .splinter:py
#                  .splinter:vx   .splinter:vy
#                  .splinter:fx   .splinter:fy
#                  .splinter:rz   .splinter:av .splinter:t
#                  .splinter:lrps .splinter:rrps
#                  <out>)}

#sp {make-free-move-model
#   (state <s> ^superstate nil ^svs <svs>)
#   (<svs> ^spatial-scene.child.id splinter ^command <c>)
#-->
#   (<c> ^create-model <cm>)
#   (<cm> ^name free-move ^type splinter)}
#   
## for now, assume that colliding with the box doesn't affect the robot's movement
#sp {assign-free-move-model
#   (state <s> ^superstate nil ^svs.command <c>)
#   (<c> ^create-model <cm>)
#   (<cm> ^name free-move ^status success)
#-->
#   (<c> ^assign-model <am>)
#   (<am> ^name free-move ^inputs <in> ^outputs <out>)
#
#         ^inputs.splinter:px.splinter:py.splinter:rz.splinter:vel_0.splinter:vel_1.splinter:rotation_rate_2.splinter:left_rads_per_sec.splinter:right_rads_per_sec.left.right
#
#         ^outputs.splinter:px.splinter:py.splinter:rz.splinter:vel_0.splinter:vel_1.splinter:rotation_rate_2.splinter:left_rads_per_sec.splinter:right_rads_per_sec)}

#sp {make-collision-model
#   (state <s> ^superstate nil ^svs.command <c>)
#-->
#   (<c> ^create-model <cm>)
#   (<cm> ^name collision
#         ^type lwr
#         ^log |collision.arff|
#         ^test t)}
#
#sp {assign-collision-model
#   (state <s> ^superstate nil 
#              ^svs.command <c>
#              ^intersect ( ^a splinter ^b box1))
#-->
#   (<c> ^assign-model <am>)
#   (<am> ^name collision ^inputs <in> ^outputs <out>)
#
#         ^inputs.splinter:px.splinter:py.splinter:rz.box1:px.box1:py.box1:rz.splinter:vel_0.splinter:vel_1.left.right
#
#         ^outputs.box1:px.box1:py.box1:rz)}
